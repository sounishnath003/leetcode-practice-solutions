
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        """looks like; we can apply a DFS traversal on the graph"""
        # get the length of the graph nodes
        NODES=len(graph)
        initial.sort()
        # initial: is the ndoes we need to start the work.
        # as it mentioned, we need to perform the dfs traversal oly
        def dfs(graph, node, infected, visited):
            # by the standard format of dfs
            # visit the node
            visited[node]=True
            # add the node to the infected set.
            infected.add(node)
            # traverse all the neighbours of the node from the graph
            # try to explore and mark as visited and infected
            for nbr in range(NODES):
                # if there are the connection from ndoe ---> nbr
                # and it is not visited
                if graph[node][nbr] == 1 and not visited[nbr]:
                    dfs(graph, nbr, infected, visited)

        # min_infected
        min_infected=float("inf")
        bestnode=initial[0]

        for node in initial:
            infected=set()
            for i in initial:
                if i != node:
                    dfs(graph,i,infected, [False] * NODES)

            if min_infected > len(infected):
                min_infected=min(min_infected, len(infected))
                bestnode=node

        return bestnode